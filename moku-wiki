#!/usr/bin/env python

""" moku-wiki

Converts a folder of Markdown files, applying the following transforms:

*  Inter-page links can be specified using the target page's title (as specified in its YAML
metadata block), e.g. '[[A Page Title]]'. This is converted to a standard Markdown link to the
HTML version of that page: '[A Page Title](a_page_title.html)'.

*  Tags can also be specified in the YAML metadata block. They can be referenced in a page using
the following syntax: '{{tag1}}'. This will produce a list of page links that have the "tag1" tag.

The files in the specified output folder are named according to their title (not their input file
name). For example, a page with the "title" metadata of "A Page Title" will be converted to
"a_page_title.md". Output files can then be processed using a Markdown processor (the assumptions
is that pandoc is being used).

"""

import os
import re
import sys

###

def create_indexes():

	for file in os.listdir(source_dir):

		if file.startswith("."):
			continue

		with open(os.path.join(source_dir, file), "r") as input_file:
			contents = input_file.read()

		title = regex_meta_title.search(contents)

		if title:
			title = title.group(1).strip()
		else:
			continue

		if title not in index_titles:
			index_titles[title] = create_valid_filename(title)
		else:
			print sys.argv[0] + ": skipping '" + file + "', duplicate title '" + title + "'"
			continue

		tags = regex_meta_tags.search(contents)

		if tags:
			# if there are tags remove spaces and brackets then split into list
			tags = tags.group(1).translate(None, ' []').split(",")
		else:
			continue

		# add each tag to index, with titles as set
		for tag in tags:
			if tag not in index_tags:
				index_tags[tag] = set()

			index_tags[tag].add(title)


###

def convert_page_link(page):
	# format is [[Page name]] or [[Show name|Page name]]

	page_name = str(page.group())[2:-2]
	show_name = page_name

	if "|" in page_name:
		show_name, page_name = page_name.split("|")

	if page_name in index_titles:
		# if title exists in index make into a link
		return "[" + show_name + "](" + index_titles[page_name] + ".html)"
	else:
		# if title does not exist in index then turn into bracketed span with class='broken'
		return "[" + page_name + "]{.broken}"


###

def convert_tag_link(tags):
	tag_list = str(tags.group())[2:-2]
	tag_list = tag_list.split(" ")
	page_set = set()

	# get initial category
	tag_name = tag_list[0]

	# check that first tag value exists
	if tag_name not in index_tags:
		
		# if the first tag is "*" then list all pages; otherwise return empty string
		if "*" in tag_name:
			page_set = set(index_titles.keys())
		else:
			return

	else:
		# copy first tag set
		page_set = set(index_tags[tag_list[0]])

		# add other categories
		for __, tag in enumerate(tag_list[1:]):

			if tag[0] == '+' or tag[0] == '-':
				tag_name = tag[1:]
			else:
				tag_name = tag

			if tag_name not in index_tags:
				continue

			if tag[0] == '+':
				page_set = page_set & index_tags[tag_name]
			elif tag[0] == '-':
				page_set = page_set - index_tags[tag_name]
			else:
				page_set = page_set | index_tags[tag_name]

	# format the set into a string of page links, sorted alphabetically
	page_list = ""

	for page in sorted(list(page_set)):
		page_list += "[[" + page + "]]\n\n"

	return page_list


###

def create_valid_filename(s):
	# see also https://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename
	# re: Django comment about removing unicode chars
	s = str(s).strip().replace(' ', '_').lower()
	return re.sub(r'(?u)[^-\w.]', '', s)


### MAIN ###

if len(sys.argv) != 3:
	print "usage: " + sys.argv[0] + " source_dir target_dir"
	exit()

source_dir = sys.argv[1]
target_dir = sys.argv[2]

# prepare regular expressions

regex_meta_title = re.compile(r"[T|t]itle:(.*)(\r\n|\r|\n)")
regex_meta_tags = re.compile(r"[T|t]ags:(.*)(\r\n|\r|\n)")

regex_page_link = re.compile(r"\[\[[\w\s,|']*\]\]")
regex_tags_link = re.compile(r"\{\{[\w\s\*+-]*\}\}")

# set up indexes

index_tags = {}		# index of tags, containing set of titles with that tag
index_titles = {}	# index of titles, containing associated base file name

# create indexes

create_indexes()

# process files

for file in os.listdir(source_dir):

	if file.startswith("."):
		continue

	with open(os.path.join(source_dir, file), "r") as input_file:
		contents = input_file.read()

	title = regex_meta_title.search(contents)

	if title:
		title = title.group(1).strip()
	else:
		print sys.argv[0] + ": skipping '" + file + "', no title found"
		continue

	# replace tags links first (may create page links)
	contents = regex_tags_link.sub(convert_tag_link, contents)

	# replace page links
	contents = regex_page_link.sub(convert_page_link, contents)

	# get output file name by adding ".md" to title's file name
	with open(os.path.join(target_dir, index_titles[title] + ".md"), "w") as output_file:
		output_file.write(contents)
