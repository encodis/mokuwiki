<?xml version="1.0" encoding="UTF-8"?>

<project
    name="mokuwiki"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <!-- include antcontrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- set up environment variables -->
    <property environment="env"/>

    <!-- set up local properties -->
    <property name="python.exe" value="python"/>
    <property name="mokuwiki.py" value="mokuwiki.py"/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="dist"/>
    <property name="test.dir" value="test"/>
    <property name="input.dir" value="${test.dir}/input"/>
    <property name="output.dir" value="${test.dir}/output"/>

    <!-- build targets -->

    <target
        name="test"
        description="Run local mokuwiki script on test files">

        <delete dir="${output.dir}"/>
        <mkdir dir="${output.dir}"/>
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>

        <python script="./${mokuwiki.py}">
            <args>
                <arg value="--index"/>
                <arg value="${input.dir}"/>
                <arg value="${output.dir}"/>
            </args>
        </python>

        <for param="file">
            <sequential>

                <local name="output.file"/>
                <basename property="output.file" file="@{file}" suffix=".md"/>

                <pandoc
                    input="@{file}"
                    output="${build.dir}/${output.file}.html"/>

            </sequential>

            <fileset dir="${output.dir}">
                <include name="*.md"/>
            </fileset>
        </for>
    </target>

    <target
        name="dist"
        description="Make distribution">

        <python script="setup.py">
            <args>
                <arg value="sdist"/>
            </args>
        </python>
    </target>

    <target
        name="deploy"
        description="Deploy mokuwiki"
        depends="dist">

        <!-- unzip to build -->
        <unzip src="${dist.dir}/mokuwiki-1.0.zip" dest="${build.dir}"/>

        <!-- run python setup.py install in build/mokuwiki-1.0.zip -->
        <python script="setup.py" dir="${build.dir}/mokuwiki-1.0">
            <args>
                <arg value="install"/>
            </args>
        </python>
    </target>

    <!-- macrodefs -->

    <macrodef
        name="python"
        description="Run python modules or scripts">

        <attribute
            name="module"
            default=""
            description="Python module name"/>

        <attribute
            name="script"
            default=""
            description="Python script path"/>

        <attribute
            name="dir"
            default="."
            description="Directory to run command in"/>

        <element
            name="args"
            optional="true"
            description="Remaining command line arguments"/>

        <sequential>

            <fail message="[python] cannot specify 'module' and 'script' attributes together">
                <condition>
                    <and>
                        <not><equals arg1="@{module}" arg2=""/></not>
                        <not><equals arg1="@{script}" arg2=""/></not>
                    </and>
                </condition>
            </fail>

            <!-- check python.exe exists -->
            <find-exe property="python.exe" unless:set="python.exe"/>

            <exec
                executable="${python.exe}"
                searchpath="true"
                dir="@{dir}">
                <arg line="-m @{module}" unless:blank="@{module}"/>
                <arg line="@{script}" unless:blank="@{script}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef
        name="pandoc"
        description="Run pandoc with parameters">

        <attribute
            name="input"
            description="Input file"/>

        <attribute
            name="output"
            description="Output file"/>

        <attribute
            name="format"
            default=""
            description="Output format"/>

        <attribute
            name="options"
            default=""
            description="List of options"/>

        <attribute
            name="template"
            default=""
            description="Template file"/>

        <attribute
            name="style"
            default=""
            description="Style"/>

        <attribute
            name="lua-filters"
            default=""
            description="List of lua filters"/>

        <sequential>

            <!-- check if pandoc executable is available -->
            <find-exe property="pandoc.exe" windows="pan-doc.exe" unless:set="pandoc.exe"/>

            <!-- convert markdown -->
            <exec
                executable="${pandoc.exe}"
                searchpath="true"
                dir=".">
                <arg value="--standalone"/>
                <arg value="--self-contained"/>
                <arg value="--from=markdown+smart"/>
                <arg value="--to=html5"/>
                <arg value="--template=@{template}" unless:blank="@{template}"/>
                <arg value="--css=@{style}" unless:blank="@{style}"/>
                <arg value="--output=@{output}"/>

                <arg value="@{input}"/>
            </exec>

        </sequential>
    </macrodef>

    <macrodef
        name="find-exe"
        description="Find the name of the executable">

        <attribute
            name="property"
            description="Property to set with the executable name"/>

        <attribute
            name="windows"
            default=""
            description="Name of the Windows executable (if different from 'property')"/>

        <attribute
            name="unix"
            default=""
            description="Name of the Unix executable (if different from 'property')"/>

        <sequential>

            <local name="property.name"/>
            <propertyregex
                property="property.name"
                input="@{property}"
                regexp="(\w+).\w+"
                replace="\1"/>

            <local name="property.ext"/>
            <propertyregex
                property="property.ext"
                input="@{property}"
                regexp="\w+.(\w+)"
                replace="\1"/>

            <local name="windows.name"/>
            <property name="windows.name" value="@{windows}" unless:blank="@{windows}"/>
            <property name="windows.name" value="${property.name}.${property.ext}" if:blank="@{windows}"/>

            <local name="unix.name"/>
            <property name="unix.name" value="@{unix}" unless:blank="@{unix}"/>
            <property name="unix.name" value="${property.name}" if:blank="@{unix}"/>

            <!-- set property -->
            <condition property="@{property}" value="${windows.name}">
              <os family="windows"/>
            </condition>

            <condition property="@{property}" value="${unix.name}">
              <not><os family="windows"/></not>
            </condition>

            <!-- check that executable is in the PATH -->
            <fail message="[find-exe] An executable file for '@{property}' cannot be found on the path">
              <condition>
                  <not>
                      <available file="${@{property}}" filepath="${env.PATH}" />
                  </not>
              </condition>
            </fail>

            <echo message="[find-exe] @{property}=${@{property}}" if:true="${macro.debug}"/>

        </sequential>
    </macrodef>

</project>
